name: Check-and-Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch, and only when TF or TFVARS files are involved
  push:
    branches: [ main ]
    paths:
      - '**.tf'
      #- '**.tfvars'
        
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      #- '**.tfvars'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  ######################
  #
  # Staging deployment
  #
  ######################
  check-and-deploy-stg:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENVIRONMENT: 'stg'
      REGION: 'us-central1'
      ZONE: 'us-central1-c'
      ORGANIZATION: 'dp'
      PRODUCT_STRING: 'tformers'
      GCLOUD_PROJECT: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      # Set up Terraform Cloud authentication, because Terraform doesn't accept environment variables we will build a terraformrc file dynamically using GITHUB secrets
      # This is needed to be able to pull TF modules from the private Terraform registry
      - name: Set up Terraform Cloud authentication
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
        run: |
          cat << EOF> ./run-modules/create-gke/.terraformrc
          {
            "credentials": {
              "app.terraform.io": {
                "token": "$TFE_TOKEN"
              }
            }
          EOF

      # Runs terraform init to set up modules and pull in needed providers
      - name: Run a Terraform init on CREATE-GKE Terraform files
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
            TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
            GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ init

      # Runs a container from ghcr.io, version v0.33.1
      - name: Check linting of CREATE-GKE Terraform files
        uses: terraform-linters/tflint-bundle@v0.33.1
        env:
            TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
        # here are some options: loglevel to provide visibility, module support enabled, disable 1 TFLint default rule that was giving us trouble, and manually specify the location in the repo for TF files
        # we may need to add further steps after this to check each directory where TF files are
        with:
          #args: --loglevel=info --module --disable-rule=terraform_deprecated_interpolation ./run-modules/create-gke/
          args: --loglevel=info ./run-modules/create-gke/
      
      # Runs terraform validate to ensure that configuration looks syntactically valid
      - name: Run a Terraform validate on Staging environment
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        with:
          TF_WORKSPACE: ${{ env.DEPLOY_ENVIRONMENT }}
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ validate

      # Runs terraform apply automatically - no approval step
      - name: Run a Terraform Apply for Staging environment
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
            TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
            GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
            TF_WORKSPACE: ${{ env.DEPLOY_ENVIRONMENT }}
            TF_VAR_gcp_project_id: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
            TF_VAR_billing_account: ${{ secrets.TF_VAR_BILLING_ACCOUNT }}
            TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME }}
            TF_VAR_gcp_region: ${{ env.REGION }}
            TF_VAR_gcp_zone: ${{ env.ZONE }}
            TF_VAR_org: ${{ env.ORGANIZATION }}
            TF_VAR_product_string: ${{ env.PRODUCT_STRING }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ apply -auto-approve

      # Authenticate to Google Cloud using GitHub Secret for JSON service account token
      - name: Authenticate to Google Cloud Platform
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      
      # Authenticate to the GKE Kubernetes cluster we justed created above, generate a kubeconfig
      - name: Authenticate to Kubernetes
        uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: gke-${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }}
          location: ${{ env.REGION }}
      
      # Test kubectl connection
      - name: Check Kubernetes cluster responding to kubectl
        run: kubectl get nodes

      # Checkout Helm chart for application
      - name: Checkout Helm chart
        uses: actions/checkout@v2
        with:
          repository: dpreno-mcgill/dpreno-react-redux-chart
          path: chart-${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }}
          ref: main
      
      # Install or upgrade Helm chart, use install flag in case it's never been previously deployed, use wait flag to not proceed until app has finished deploying
      - name: Apply Helm chart to Kubernetes cluster
        uses: WyriHaximus/github-action-helm3@v2
        with:
          exec: helm upgrade ${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }} chart-${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }} --install --wait

      # Display k8s status after Helm deploy
      - name: Check kubectl status post-deploy
        run:  kubectl get all

      # Display service URL
      - name: Display service URL
        run: |
            export SERVICE_IP=$(kubectl get svc --namespace default ${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }}-dpreno-react-redux --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
            echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
            echo \# Access the application at http://$SERVICE_IP
            echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#

  ##########################
  #
  # Production deployment
  #
  ##########################
  check-and-deploy-prd:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # set to reference GitHub environment so that a manual approval step is required for deploy of production environment
    environment: 'prd'
    env:
      DEPLOY_ENVIRONMENT: 'prd'
      REGION: 'us-central1'
      ZONE: 'us-central1-c'
      ORGANIZATION: 'dp'
      PRODUCT_STRING: 'tformers'
      GCLOUD_PROJECT: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      # Set up Terraform Cloud authentication, because Terraform doesn't accept environment variables we will build a terraformrc file dynamically using GITHUB secrets
      # This is needed to be able to pull TF modules from the private Terraform registry
      - name: Set up Terraform Cloud authentication
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
        run: |
          cat << EOF> ./run-modules/create-gke/.terraformrc
          {
            "credentials": {
              "app.terraform.io": {
                "token": "$TFE_TOKEN"
              }
            }
          EOF

      # Runs terraform init to set up modules and pull in needed providers
      - name: Run a Terraform init on CREATE-GKE Terraform files
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
            TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
            GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ init

      # Runs a container from ghcr.io, version v0.33.1
      - name: Check linting of CREATE-GKE Terraform files
        uses: terraform-linters/tflint-bundle@v0.33.1
        env:
            TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
        # here are some options: loglevel to provide visibility, module support enabled, disable 1 TFLint default rule that was giving us trouble, and manually specify the location in the repo for TF files
        # we may need to add further steps after this to check each directory where TF files are
        with:
          #args: --loglevel=info --module --disable-rule=terraform_deprecated_interpolation ./run-modules/create-gke/
          args: --loglevel=info ./run-modules/create-gke/
      
      # Runs terraform validate to ensure that configuration looks syntactically valid
      - name: Run a Terraform validate on Production environment
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        with:
          TF_WORKSPACE: ${{ env.DEPLOY_ENVIRONMENT }}
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ validate

      # Runs terraform plan (later to be replaced with apply)
      - name: Run a Terraform plan on CREATE-GKE Terraform files
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
            TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
            GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
            TF_WORKSPACE: ${{ env.DEPLOY_ENVIRONMENT }}
            TF_VAR_gcp_project_id: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
            TF_VAR_billing_account: ${{ secrets.TF_VAR_BILLING_ACCOUNT }}
            TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME }}
            TF_VAR_gcp_region: ${{ env.REGION }}
            TF_VAR_gcp_zone: ${{ env.LOCATION }}
            TF_VAR_org: ${{ env.ORGANIZATION }}
            TF_VAR_product_string: ${{ env.PRODUCT_STRING }}

        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ plan

      # Authenticate to Google Cloud using GitHub Secret for JSON service account token
      - name: Authenticate to Google Cloud Platform
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      
      # Authenticate to the GKE Kubernetes cluster we justed created above, generate a kubeconfig
      - name: Authenticate to Kubernetes
        uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: gke-${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }}
          location: ${{ env.REGION }}
      
      # Test kubectl connection
      - name: Check Kubernetes cluster responding to kubectl
        run: kubectl get nodes

      # Checkout Helm chart for application
      - name: Checkout Helm chart
        uses: actions/checkout@v2
        with:
          repository: dpreno-mcgill/dpreno-react-redux-chart
          path: chart-${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }}
          ref: main
      
      # Install or upgrade Helm chart, use install flag in case it's never been previously deployed, use wait flag to not proceed until app has finished deploying
      - name: Apply Helm chart to Kubernetes cluster
        uses: WyriHaximus/github-action-helm3@v2
        with:
          exec: helm upgrade ${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }} chart-${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }} --install --wait

      # Display k8s status after Helm deploy
      - name: Check kubectl status post-deploy
        run:  kubectl get all

      # Display service URL
      - name: Display service URL
        run: |
            export SERVICE_IP=$(kubectl get svc --namespace default ${{ env.ORGANIZATION }}-${{ env.PRODUCT_STRING }}-${{ env.DEPLOY_ENVIRONMENT }}-dpreno-react-redux --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
            echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
            echo \# Access the application at http://$SERVICE_IP
            echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#

